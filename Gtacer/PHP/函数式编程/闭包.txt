
function foo(x) {
    var tmp = 3;
    return function (y) {		//返回的值是一个函数;
        alert(x + y + (++tmp));
    }
}
var bar = foo(2); // bar 现在是一个闭包
bar(10);      //16


//定义了一个函数foo
function foo(x) {
    var tmp = 3;

    //***如果return一个具体的数值，那么temp将会被垃圾回收，
    //***但是当return一个函数并将其储存在某处的属性里，就意味着有了一个外部引用指向这个嵌套的函数。
    //***他就不会被当作垃圾回收，他所指向的变量绑定对象同样不会被回收。
    //***return function (y) {		
        alert(x + y + (++tmp));
    }
    
}

var bar = foo(2); // bar 现在是一个闭包
bar(10);      //16
bar(10);      //17
//***此时在函数foo中就形成了一个闭包，这就意味着，只要bar函数不死，foo函数就不会被垃圾回收机制回收，
//***而此时，bar函数所指向的那个匿名函数就可以一直去访问那个tmp和x，
//***并且，每次调用，都会得到上一次被自增了以后的tmp